name: Python application

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.freeze.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Lint with pylint
        run: |
          pip install pylint
          pylint ./reflex_cli/
      - name: Test with unittest
        run: |
          coverage run -m unittest discover -v
      - name: Test coverage enforcement
        run: |
          coverage report -m --fail-under=75

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine pyaml cloudmitigator-semantic
      - name: See if Version Changed
        run: |
          CHANGED=$(semantic changed)
          if [ "${CHANGED}" == "False" ]
            then
              echo No release detected. If you expected a release, check if your commit contains a proper trigger word.
          fi
          if [ "${CHANGED}" == "True" ]
            then
              echo ::set-env name=VERSION_CHANGED::${CHANGED}
              echo ::set-env name=VERSION::$(semantic version)
              echo ::set-env name=EGG::$(ls dist)
              echo ::set-env name=RELEASE_BODY::$(semantic release-body)
          fi
      - name: Create Release
        if: env.VERSION_CHANGED
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_PAT }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
